{
  "chunk_id": "trySync_deep_dive_common-pitfalls",
  "title": "Common Pitfalls",
  "content": "## Common Pitfalls\n\n### 1. Forgetting to Check Results\n\n```typescript\n// BAD: Not checking if result is an error\nconst result = trySync(() => JSON.parse(input));\nconsole.log(result.data); // Might fail if result is TryError\n\n// GOOD: Always check with isTryError\nconst result = trySync(() => JSON.parse(input));\nif (isTryError(result)) {\n console.error(result.message);\n} else {\n console.log(result); // Safe to use\n}\n```\n\n### 2. Async Function in trySync\n\n```typescript\n// BAD: Using async function in trySync\nconst result = trySync(async () => fetch(\"/api/data\"));\n// result will be a Promise, not the actual data\n\n// GOOD: Use tryAsync for async operations\nconst result = await tryAsync(() => fetch(\"/api/data\"));\n```\n\n### 3. Performance in Hot Loops\n\n```typescript\n// BAD: Creating context objects in hot loops\nfor (let i = 0; i < 1000000; i++) {\n const result = trySync(() => process(i), {\n context: { iteration: i, timestamp: Date.now() },\n });\n}\n\n// GOOD: Minimal context or no context in hot loops\nfor (let i = 0; i < 1000000; i++) {\n const result = trySync(() => process(i));\n}\n```",
  "metadata": {
    "chunk_id": "trySync_deep_dive_common-pitfalls",
    "source_document": "rag-docs/trySync-deep-dive.md",
    "chunk_type": "deep-dive-section",
    "last_updated": "2025-07-08T20:17:18.343Z",
    "topics": [
      "common pitfalls",
      "1. forgetting to check results",
      "2. async function in trysync",
      "3. performance in hot loops",
      "typescript",
      "error",
      "async",
      "sync",
      "promise",
      "function",
      "performance"
    ],
    "complexity": "intermediate",
    "includes_code": true,
    "line_count": 44,
    "token_count": 227,
    "module": "sync",
    "category": "utilities",
    "search_keywords": [
      "trySync",
      "parse",
      "log",
      "isTryError",
      "error",
      "fetch",
      "tryAsync",
      "process",
      "now",
      "Not",
      "Always",
      "Using",
      "Use",
      "Creating",
      "Date",
      "Minimal"
    ],
    "common_questions": [
      "How does common pitfalls work?",
      "Common Pitfalls best practices",
      "Common Pitfalls patterns"
    ],
    "id": "trySync-deep-dive",
    "title": "trySync() - Complete Implementation Guide",
    "tags": [
      "api",
      "core",
      "sync",
      "error-handling",
      "performance"
    ],
    "related": [
      "tryAsync",
      "isTryError",
      "wrapError",
      "fromThrown",
      "createError"
    ],
    "performance_impact": "low",
    "stability": "stable",
    "related_chunks": [
      "TryErrorBoundary_deep_dive_quick-reference",
      "TryErrorBoundary_deep_dive_signature",
      "TryErrorBoundary_deep_dive_purpose",
      "TryErrorBoundary_deep_dive_implementation-details",
      "TryErrorBoundary_deep_dive_basic-usage-examples",
      "TryErrorBoundary_deep_dive_advanced-usage-patterns",
      "TryErrorBoundary_deep_dive_hook-integration",
      "TryErrorBoundary_deep_dive_error-monitoring-integration",
      "TryErrorBoundary_deep_dive_testing-strategies",
      "TryErrorBoundary_deep_dive_performance-optimization"
    ],
    "related_functions": [],
    "usage_patterns": [
      "async-operations",
      "performance-optimization"
    ],
    "cross_references": [
      "TryErrorBoundary_deep_dive_common-pitfalls",
      "configure_deep_dive_common-pitfalls",
      "fromThrown_deep_dive_common-pitfalls",
      "function_isTryError",
      "isTryError_deep_dive_common-pitfalls",
      "tryAsync_deep_dive_common-pitfalls",
      "useTry_deep_dive_common-pitfalls",
      "wrapError_deep_dive_common-pitfalls"
    ]
  },
  "hash": "3dc52542fea0eccd9504d3d016689618"
}