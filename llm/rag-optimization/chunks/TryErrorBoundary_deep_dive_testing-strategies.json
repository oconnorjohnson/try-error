{
  "chunk_id": "TryErrorBoundary_deep_dive_testing-strategies",
  "title": "Testing Strategies",
  "content": "## Testing Strategies\n\n### Unit Testing\n\n```tsx\n// Testing error boundaries\nimport { render, screen, fireEvent } from \"@testing-library/react\";\nimport { TryErrorBoundary } from \"try-error-react\";\n\ndescribe(\"TryErrorBoundary\", () => {\n const ThrowError = ({ error }: { error?: Error }) => {\n if (error) throw error;\n return <div>No error</div>;\n };\n\n it(\"should catch and display errors\", () => {\n const error = new Error(\"Test error\");\n\n render(\n <TryErrorBoundary>\n <ThrowError error={error} />\n </TryErrorBoundary>\n );\n\n expect(screen.getByText(\"Test error\")).toBeInTheDocument();\n expect(screen.getByText(\"⚠️ Operation Failed\")).toBeInTheDocument();\n });\n\n it(\"should handle retry functionality\", () => {\n let shouldThrow = true;\n const TestComponent = () => {\n if (shouldThrow) {\n throw new Error(\"Retry test\");\n }\n return <div>Success</div>;\n };\n\n render(\n <TryErrorBoundary>\n <TestComponent />\n </TryErrorBoundary>\n );\n\n expect(screen.getByText(\"Retry test\")).toBeInTheDocument();\n\n // Simulate fix\n shouldThrow = false;\n fireEvent.click(screen.getByText(\"Try Again\"));\n\n expect(screen.getByText(\"Success\")).toBeInTheDocument();\n });\n\n it(\"should call onError callback\", () => {\n const onError = jest.fn();\n const error = new Error(\"Callback test\");\n\n render(\n <TryErrorBoundary onError={onError}>\n <ThrowError error={error} />\n </TryErrorBoundary>\n );\n\n expect(onError).toHaveBeenCalledWith(\n expect.objectContaining({\n type: \"ReactError\",\n message: \"Callback test\",\n }),\n expect.objectContaining({\n componentStack: expect.any(String),\n })\n );\n });\n});\n```\n\n### Integration Testing\n\n```tsx\n// Integration tests with async errors\ndescribe(\"TryErrorBoundary async integration\", () => {\n it(\"should catch unhandled promise rejections\", async () => {\n const AsyncComponent = () => {\n React.useEffect(() => {\n // Simulate unhandled promise rejection\n Promise.reject(new Error(\"Async error\"));\n }, []);\n\n return <div>Async component</div>;\n };\n\n render(\n <TryErrorBoundary catchAsyncErrors={true}>\n <AsyncComponent />\n </TryErrorBoundary>\n );\n\n // Wait for async error to be caught\n await waitFor(() => {\n expect(screen.getByText(\"Async error\")).toBeInTheDocument();\n });\n });\n\n it(\"should handle event handler errors\", () => {\n const onError = jest.fn();\n\n const EventComponent = () => {\n const handleClick = () => {\n throw new Error(\"Event handler error\");\n };\n\n return <button onClick={handleClick}>Click me</button>;\n };\n\n render(\n <TryErrorBoundary catchEventHandlerErrors={true} onError={onError}>\n <EventComponent />\n </TryErrorBoundary>\n );\n\n // Simulate event handler error\n fireEvent.click(screen.getByText(\"Click me\"));\n\n expect(onError).toHaveBeenCalledWith(\n expect.objectContaining({\n message: \"Event handler error\",\n }),\n null\n );\n });\n});\n```\n\n### End-to-End Testing\n\n```tsx\n// E2E testing with error boundaries\ndescribe(\"Error boundary E2E\", () => {\n it(\"should recover from network errors\", async () => {\n // Mock network failure then success\n const mockFetch = jest\n .fn()\n .mockRejectedValueOnce(new Error(\"Network error\"))\n .mockResolvedValueOnce({ ok: true, json: () => ({ data: \"success\" }) });\n\n global.fetch = mockFetch;\n\n const NetworkComponent = () => {\n const [data, setData] = useState(null);\n\n useEffect(() => {\n fetch(\"/api/data\")\n .then((res) => res.json())\n .then(setData)\n .catch((err) => {\n throw new Error(`Network failed: ${err.message}`);\n });\n }, []);\n\n return <div>{data ? `Data: ${data.data}` : \"Loading...\"}</div>;\n };\n\n render(\n <TryErrorBoundary retryStrategy={{ maxRetries: 3, delay: 100 }}>\n <NetworkComponent />\n </TryErrorBoundary>\n );\n\n // Wait for error to appear\n await waitFor(() => {\n expect(screen.getByText(/Network failed/)).toBeInTheDocument();\n });\n\n // Retry should succeed\n fireEvent.click(screen.getByText(\"Try Again\"));\n\n await waitFor(() => {\n expect(screen.getByText(\"Data: success\")).toBeInTheDocument();\n });\n\n expect(mockFetch).toHaveBeenCalledTimes(2);\n });\n});\n```",
  "metadata": {
    "chunk_id": "TryErrorBoundary_deep_dive_testing-strategies",
    "source_document": "rag-docs/TryErrorBoundary-deep-dive.md",
    "chunk_type": "deep-dive-section",
    "last_updated": "2025-07-08T20:17:18.277Z",
    "topics": [
      "testing strategies",
      "unit testing",
      "integration testing",
      "end-to-end testing",
      "tsx",
      "error",
      "async",
      "sync",
      "promise",
      "callback",
      "function",
      "react",
      "component",
      "testing"
    ],
    "complexity": "intermediate",
    "includes_code": true,
    "line_count": 183,
    "token_count": 558,
    "module": "react",
    "category": "testing",
    "search_keywords": [
      "describe",
      "it",
      "Error",
      "render",
      "expect",
      "getByText",
      "toBeInTheDocument",
      "click",
      "fn",
      "toHaveBeenCalledWith",
      "objectContaining",
      "any",
      "useEffect",
      "reject",
      "waitFor",
      "mockRejectedValueOnce",
      "mockResolvedValueOnce",
      "useState",
      "fetch",
      "then",
      "json",
      "catch",
      "toHaveBeenCalledTimes"
    ],
    "common_questions": [
      "How does testing strategies work?",
      "Testing Strategies best practices",
      "Testing Strategies patterns"
    ],
    "id": "TryErrorBoundary-deep-dive",
    "title": "TryErrorBoundary - Complete Implementation Guide",
    "tags": [
      "react",
      "error-boundary",
      "component",
      "retry",
      "async-errors",
      "event-handlers"
    ],
    "related": [
      "useTry",
      "useErrorRecovery",
      "createError",
      "fromThrown",
      "React"
    ],
    "performance_impact": "low",
    "stability": "stable",
    "related_chunks": [
      "TryErrorBoundary_deep_dive_quick-reference",
      "TryErrorBoundary_deep_dive_signature",
      "TryErrorBoundary_deep_dive_purpose",
      "TryErrorBoundary_deep_dive_implementation-details",
      "TryErrorBoundary_deep_dive_basic-usage-examples",
      "TryErrorBoundary_deep_dive_advanced-usage-patterns",
      "TryErrorBoundary_deep_dive_hook-integration",
      "TryErrorBoundary_deep_dive_error-monitoring-integration",
      "TryErrorBoundary_deep_dive_performance-optimization",
      "TryErrorBoundary_deep_dive_common-pitfalls"
    ],
    "related_functions": [],
    "usage_patterns": [
      "async-operations",
      "react-integration",
      "testing"
    ],
    "cross_references": [
      "fromThrown_deep_dive_testing-strategies",
      "function_AsyncComponent",
      "function_Component",
      "function_TestComponent",
      "function_handleClick",
      "function_throwError",
      "isTryError_deep_dive_testing-strategies",
      "tryAsync_deep_dive_testing-strategies",
      "trySync_deep_dive_testing-strategies",
      "useTry_deep_dive_testing-strategies",
      "wrapError_deep_dive_testing-strategies"
    ]
  },
  "hash": "06e89000b5d13d169c87f6a7fe98687f"
}